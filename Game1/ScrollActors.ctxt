#BlueJ class context
comment0.target=ScrollActors
comment0.text=\r\n\ CLASS\:\ QActor\ (subclass\ of\ Actor)<br>\r\n\ AUTHOR\:\ danpost\ (greenfoot.org\ username)<br>\r\n\ CREATION\ DATE\:\ September\ 5,\ 2014<br>\r\n\ MODIFIED\:\ October\ 6,\ 2014\ -\ seperated\ rotation\ and\ movement\ vectors;\r\n\ also,\ changed\ from\ using\ vector\ and\ speed\ fields\ to\ horizontal\ and\ vertical\ speed\ fields<br>\r\n\ MODIFIED\:\ October\ 8,\ 2014\ -\ added\ two\ needed\ 'move'\ methods\ and\ corrected\ documentation<br>\r\n\ <br>\r\n\ NOTE\:\ not\ intended\ for\ use\ in\ gridded\ worlds\ (worlds\ with\ a\ cell-size\ greater\ than\ one).<br>\r\n\ <br>\r\n\ DESCRIPTION\:\ an\ extension\ of\ the\ Actor\ class\ that\ provides\ smooth\ movement\ and\ turning;\ also,\r\n\ it\ provides\ options\ for\ the\ behavior\ of\ the\ actor,\ 'boundedAction',\ when\ reaching\ bounded\ limits\r\n\ (the\ edges\ of\ the\ world\ plus\ or\ minus\ an\ offset\ value\ saved\ in\ the'boundedRange'\ field.<br>\r\n\ <br>\r\n\ The\ class\ works\ by\ dividing\ each\ unit\ (pixel\ or\ degree)\ into\ 1/100ths\ of\ that\ unit.\ \ When\ adding\ an\r\n\ actor\ into\ the\ world,\ setting\ its\ location\ in\ the\ world\ or\ setting\ its\ rotation,\ normal\ values\ are\r\n\ given.\ \ When\ moving\ or\ turning\ (adjusting\ using\ the\ current\ location\ or\ rotation\ as\ a\ reference),\ one\r\n\ hundred\ times\ the\ actual\ changes\ are\ given.\ \ The\ values\ given\ do\ not\ have\ to\ be\ even\ multiples\ of\ one\r\n\ hundred,\ which\ allows\ multiple\ in-between\ speeds\ of\ moving\ and\ turning\ to\ be\ available\ to\ your\ actors,\r\n\ including\ very\ small\ rates\ of\ speed\ without\ the\ need\ for\ delay\ counters.\r\n\ \r\n\ The\ class\ contains\ horizontal\ and\ vertical\ speed\ fields,\ 'vX'\ and\ 'vY'\ that\ work\ in\ the\ same\ unitary\r\n\ scale.\ \ There\ are\ methods\ to\ get\ and\ set\ these\ field\ values\ and\ a\ method,\ 'addForce'\ to\ adjust\ these\r\n\ values\ by\ way\ of\ applying\ a\ force\ which\ is\ represented\ by\ a\ length\ (strength\ of\ force)\ and\ vector\r\n\ (direction\ of\ force).\ \ Both\ parts\ of\ the\ force\ are\ given\ in\ '100x'\ for\ accuracy.\r\n
comment1.params=
comment1.target=void\ move()
comment1.text=\r\n\ as\ the\ main\ method\ for\ movement,\ uses\ the\ current\ horizontal\ and\ vertical\ speed\ values\ to\r\n\ relocate\ the\ actor,\ then\ checks\ the\ bounds\ of\ the\ actor\ to\ perform\ set\ actions;\ all\ 'move'\r\n\ methods\ call\ this\ method\ and\ can\ be\ called\ by\ subclasses\ for\ continuous\ movement\ along\ the\r\n\ same\ direction;\ the\ other\ methods\ that\ use\ it\ are\ 'move(int)',\ which\ will\ move\ the\ actor\ in\ the\r\n\ direction\ it\ is\ facing\ and\ 'move(int,\ int)',\ which\ will\ move\ the\ actor\ in\ the\ direction\ given.\ \r\n
comment10.params=
comment10.target=void\ boundsAct()
comment10.text=\r\n\ internal\ method\ to\ perform\ the\ bounded\ action\ that\ is\ currently\ set\ to\ the\ actor\r\n
comment11.params=x\ y
comment11.target=void\ setQLocation(int,\ int)
comment11.text=\r\n\ sets\ the\ location\ of\ the\ actor\ to\ fined-tuned\ coordinate\ values\r\n\ \r\n\ @param\ x\ the\ fine-tuned\ x-coordinate\ value\ (100x)\r\n\ @param\ y\ the\ fine-tuned\ y-coordinate\ value\ (100x)\r\n
comment12.params=amount
comment12.target=void\ setQRotation(int)
comment12.text=\r\n\ sets\ the\ rotation\ of\ the\ actor\ to\ a\ fined-tuned\ value\r\n\ \r\n\ @param\ amount\ the\ fine-tuned\ rotational\ value\ for\ the\ actor\ in\ degrees\ (100x)\r\n
comment13.params=
comment13.target=int\ getQX()
comment13.text=\r\n\ returns\ the\ fine-tuned\ x-coordinate\ for\ the\ locationof\ the\ actor\ (100x)\r\n\ \r\n\ @return\ the\ fine-tuned\ value\ of\ the\ x-coordinate\ for\ the\ location\ of\ the\ actor\r\n
comment14.params=
comment14.target=int\ getQY()
comment14.text=\r\n\ returns\ the\ fine-tuned\ y-coordinate\ for\ the\ location\ of\ the\ actor\ (100x)\r\n\ \r\n\ @return\ the\ fine-tuned\ value\ of\ the\ y-coordinate\ for\ the\ location\ of\ the\ actor\r\n
comment15.params=
comment15.target=int\ getQR()
comment15.text=\r\n\ returns\ the\ fine-tuned\ rotation\ of\ the\ actor\ (100x)\r\n\ \r\n\ @return\ the\ fine-tuned\ rotation\ of\ the\ actor\r\n
comment16.params=
comment16.target=int\ getVX()
comment16.text=\r\n\ returns\ the\ fine-tuned\ speed\ along\ the\ horizontal\ (100x)\r\n\ \r\n\ @return\ the\ fine-tuned\ value\ of\ the\ speed\ of\ the\ actor\ along\ the\ horizontal\r\n
comment17.params=
comment17.target=int\ getVY()
comment17.text=\r\n\ returns\ the\ fine-tuned\ speed\ along\ the\ vertical\ (100x)\r\n\ \r\n\ @return\ the\ fine-tuned\ value\ of\ the\ speed\ of\ the\ actor\ along\ the\ vertical\r\n
comment18.params=speed
comment18.target=void\ setVX(int)
comment18.text=\r\n\ sets\ the\ horizontal\ speed\ to\ the\ given\ fine-tuned\ value\ (100x)\r\n\ \r\n\ @param\ speed\ the\ fine-tuned\ value\ the\ horizontal\ speed\ is\ to\ be\ set\ to\r\n
comment19.params=speed
comment19.target=void\ setVY(int)
comment19.text=\r\n\ sets\ the\ vertical\ speed\ to\ the\ given\ fine-tuned\ value\ (100x)\r\n\ \r\n\ @param\ speed\ the\ fine-tuned\ value\ the\ horizontal\ speed\ is\ to\ be\ set\ to\r\n
comment2.params=x\ y
comment2.target=void\ setLocation(int,\ int)
comment2.text=\r\n\ overrides\ the\ Actor\ class\ 'setLocation(int,\ int)'\ method\ to\ allow\ the\ q-location\ values\ to\ be\ corrected\r\n\r\n\ @param\ x\ the\ world\ x\ location\ to\ place\ the\ actor\r\n\ @param\ y\ the\ world\ y\ location\ to\ place\ the\ actor\r\n
comment3.params=amount
comment3.target=void\ turn(int)
comment3.text=\r\n\ overrides\ the\ Actor\ class\ 'turn(int)'\ method\ to\ allow\ the\ q-rotation\ value\ to\ be\ adjusted\r\n\r\n\ @param\ amount\ the\ change\ in\ rotation\ as\ a\ fine-tuned\ value\ (100x)\r\n
comment4.params=x\ y
comment4.target=void\ turnTowards(int,\ int)
comment4.text=\r\n\ overrides\ the\ Actor\ class\ 'turnTowards(int,\ int)'\ method\ to\ allow\ the\ q-rotation\ value\ to\ be\ corrected\r\n\r\n\ @param\ x\ the\ world\ x\ coordinate\ of\ the\ point\ to\ face\r\n\ @param\ y\ the\ world\ y\ coordinate\ of\ the\ point\ to\ face\r\n
comment5.params=angle
comment5.target=void\ setRotation(int)
comment5.text=\r\n\ overrides\ the\ Actor\ class\ 'setRotation(int)'\ method\ to\ allow\ the\ q-rotation\ value\ to\ be\ corrected\r\n\r\n\ @param\ angle\ the\ angle\ in\ degrees\ at\ which\ the\ rotation\ of\ the\ actor\ is\ to\ be\ set\r\n
comment6.params=amount\ direction
comment6.target=void\ addForce(int,\ int)
comment6.text=\r\n\ adds\ a\ force\ to\ the\ movement\ of\ the\ actor\r\n\r\n\ @param\ amount\ the\ strength\ of\ the\ force\ as\ a\ fine-tuned\ value\ (100x)\r\n\ @param\ direction\ the\ direction\ of\ the\ force\ in\ fine-tuned\ degrees\ (100x)\r\n
comment7.params=amount\ direction
comment7.target=void\ move(int,\ int)
comment7.text=\r\n\ applys\ a\ force\ to\ (moves)\ the\ actor\r\n\ \r\n\ @param\ amount\ the\ strength\ of\ the\ force\ as\ a\ fine-tuned\ value\ (100x)\r\n\ @param\ direction\ the\ direction\ of\ the\ force\ in\ fine-tuned\ degrees\ (100x)\r\n
comment8.params=amount
comment8.target=void\ move(int)
comment8.text=\r\n\ overrides\ the\ Actor\ class\ 'move(int)'\ method\ to\ use\ the\ given\ fine-tuned\ distance\ with\ the\r\n\ fine-tuned\ rotation\ of\ the\ actor\ for\ the\ direction\r\n\ \r\n\ @param\ amount\ the\ fine-tuned\ distanc\ value\ to\ move\ (100x)\r\n
comment9.params=action\ range
comment9.target=void\ setBoundedAction(int,\ int)
comment9.text=\r\n\ sets\ the\ action\ and\ range\ fields\ for\ behavior\ when\ bounds\ are\ exceeded\ by\ actor\r\n\r\n\ @param\ action\ one\ of\ the\ bounds\ action\ values\ of\ this\ class\r\n\ @param\ range\ offset\ from\ edge\ the\ action\ is\ to\ occur\r\n
numComments=20
